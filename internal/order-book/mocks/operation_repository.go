// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/joycesaquino/order-book-match-engine/internal/types"
)

// OperationRepository is an autogenerated mock type for the OperationRepository type
type OperationRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, orderType, status
func (_m *OperationRepository) FindAll(ctx context.Context, orderType string, status string) (types.Messages, error) {
	ret := _m.Called(ctx, orderType, status)

	var r0 types.Messages
	if rf, ok := ret.Get(0).(func(context.Context, string, string) types.Messages); ok {
		r0 = rf(ctx, orderType, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orderType, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, operation, status
func (_m *OperationRepository) Update(ctx context.Context, operation *types.DynamoEventMessage, status string) error {
	ret := _m.Called(ctx, operation, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.DynamoEventMessage, string) error); ok {
		r0 = rf(ctx, operation, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAll provides a mock function with given fields: ctx, matchOrders, operation, status
func (_m *OperationRepository) UpdateAll(ctx context.Context, matchOrders types.Messages, operation *types.DynamoEventMessage, status string) error {
	ret := _m.Called(ctx, matchOrders, operation, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Messages, *types.DynamoEventMessage, string) error); ok {
		r0 = rf(ctx, matchOrders, operation, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOperationRepository creates a new instance of OperationRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOperationRepository(t testing.TB) *OperationRepository {
	mock := &OperationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
